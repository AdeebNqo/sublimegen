//lex part

_import : 'i' 'm' 'p' 'o' 'r' 't';
_package : 'p' 'a' 'c' 'k' 'a' 'g' 'e';
_option : 'o' 'p' 't' 'i' 'o' 'n';
_message : 'm' 'e' 's' 's' 'a' 'g' 'e';
_extend : 'e' 'x' 't' 'e' 'n' 'd';
_enum : 'e' 'n' 'u' 'm';
_service : 's' 'e' 'r' 'v' 'i' 'c' 'e';
_rpc : 'r' 'p' 'c';
_group: 'g' 'r' 'o' 'u' 'p';
_default : 'd' 'e' 'f' 'a' 'u' 'l' 't';
_extensions : 'e' 'x' 't' 'e' 'n' 's' 'i' 'o' 'n' 's';
_to : 't' 'o';
_max : 'm' 'a' 'x';
_required : 'r' 'e' 'q' 'u' 'i' 'r' 'e' 'd';
_optional: 'o' 'p' 't' 'i' 'o' 'n' 'a' 'l';
_repeated: 'r' 'e' 'p' 'e' 'a' 't' 'e' 'd';
_double: 'd' 'o' 'u' 'b' 'l' 'e';
_float : 'f' 'l' 'o' 'a' 't';
_int32 : 'i' 'n' 't' '3' '2';
_int64 : 'i' 'n' 't' '6' '4';
_uint32 : 'u' 'i' 'n' 't' '3' '2';
_uint64 : 'u' 'i' 'n' 't' '6' '4';
_sint32 : 's' 'i' 'n' 't' '3' '2';
_sint64 : 's' 'i' 'n' 't' '6' '4';
_fixed32 : 'f' 'i' 'x' 'e' 'd' '3' '2';
_fixed64 : 'f' 'i' 'x' 'e' 'd' '6' '4';
_sfixed32 : 's' 'f' 'i' 'x' 'e' 'd' '3' '2';
_sfixed64 : 's' 'f' 'i' 'x' 'e' 'd' '6' '4';
_bool : 'b' 'o' 'o' 'l';
_string : 's' 't' 'r' 'i' 'n' 'g';
_bytes : 'b' 'y' 't' 'e' 's';

_semicolon : ';';
_colon : ':';
_dot : '.';
_equal : '=';
_leftqt: '`';
_leftcb: '{';
_rightcb : '}';
_leftrb : '(';
_rightrb : ')';
_leftsb : '[';
_rightsb : ']';
_comma : ',';
_decimal_digit : '0' - '9' ;

_true : 't' 'r' 'u' 'e';
_false : 'f' 'a' 'l' 's' 'e';


_quote : ('"' | '\'');
_hexEscape : '\\' ('X' | 'x') ( (('A'-'F') ('a'-'f') ('0'-'9')) | (('A'-'F') ('a'-'f') ('0'-'9')) (('A'-'F') ('a'-'f') ('0'-'9')) );
_octEscape : '\\' ['0'] ( ('0'-'7') | ('0'-'7') ('0'-'7') | ('0'-'7') ('0'-'7') ('0'-'7') );
_charEscape :  '\\' ('a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | '?' | '\'' | '"') ;

_slashzero : '\\' '0';
_strLit : _quote { _hexEscape | _octEscape | _charEscape | ( '^' | _slashzero | '\n') } _quote;
_boolLit : _true | _false;
_floatLit : _decimal_digit {_decimal_digit} ['.' _decimal_digit {_decimal_digit}] [('E' | 'e')['+' | '-'] _decimal_digit {_decimal_digit} ];

_hexInt: '0' ('x' | 'X') (['A'-'F']['a'-'f']['0'-'9']){(['A'-'F']['a'-'f']['0'-'9'])};
_octint: '0' '0'-'7' {'0'-'7'};
_decInt : ('1'-'9') _decimal_digit { _decimal_digit};

_intLit : _decInt | _hexInt | _octint;

_ws : ' ' | '\t' | '\n' | '\r' ; //whitespace

camelIdent : ('A'-'Z'){ _ws |  '_'};
_ident : ('A'-'Z') ('a'-'z') '_' { (_ws | '_') };
constant : _ident | _intLit | _floatLit | _strLit | _boolLit;
_userType : [ _dot ] _ident { _dot _ident };

type : _double | _float | _int32 | _int64 | _uint32 | _uint64 | _sint32 | _sint64 | _fixed32 | _fixed64 | _sfixed32 | _sfixed64 | _bool | _string | _bytes | _userType;

_enumField : _ident _equal _intLit _semicolon;

label: _enumField | _optional | _repeated ;
extension: _intLit [ _to (_intLit | _max) ];
